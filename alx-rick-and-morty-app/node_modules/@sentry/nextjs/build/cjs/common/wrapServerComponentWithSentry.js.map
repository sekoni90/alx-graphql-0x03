{"version":3,"file":"wrapServerComponentWithSentry.js","sources":["../../../src/common/wrapServerComponentWithSentry.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getClient,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  SPAN_STATUS_ERROR,\n  SPAN_STATUS_OK,\n  spanToJSON,\n  startSpanManual,\n  vercelWaitUntil,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from '../common/nextNavigationErrorUtils';\nimport type { ServerComponentContext } from '../common/types';\nimport { flushSafelyWithTimeout } from '../common/utils/responseEnd';\nimport { TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL } from './span-attributes-with-logic-attached';\nimport { commonObjectToIsolationScope, commonObjectToPropagationContext } from './utils/tracingUtils';\nimport { getSanitizedRequestUrl } from './utils/urls';\nimport { maybeExtractSynchronousParamsAndSearchParams } from './utils/wrapperUtils';\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapServerComponentWithSentry<F extends (...args: any[]) => any>(\n  appDirComponent: F,\n  context: ServerComponentContext,\n): F {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. ðŸ¤¯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = getActiveSpan()?.spanContext().traceId;\n      const isolationScope = commonObjectToIsolationScope(context.headers);\n\n      let pathname = undefined as string | undefined;\n      const activeSpan = getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = getRootSpan(activeSpan);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        const spanData = spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target']?.toString();\n        }\n      }\n\n      const headersDict = context.headers ? winterCGHeadersToDict(context.headers) : undefined;\n\n      let params: Record<string, string> | undefined = undefined;\n\n      if (getClient()?.getOptions().sendDefaultPii) {\n        const props: unknown = args[0];\n        const { params: paramsFromProps } = maybeExtractSynchronousParamsAndSearchParams(props);\n        params = paramsFromProps;\n      }\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n          url: getSanitizedRequestUrl(componentRoute, params, headersDict, pathname),\n        } satisfies RequestEventData,\n      });\n\n      return withIsolationScope(isolationScope, () => {\n        return withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (process.env.NEXT_RUNTIME === 'edge') {\n            const propagationContext = commonObjectToPropagationContext(\n              context.headers,\n              propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n            );\n\n            if (requestTraceId) {\n              propagationContext.traceId = requestTraceId;\n            }\n\n            scope.setPropagationContext(propagationContext);\n          }\n\n          const activeSpan = getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.server_component',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (isNotFoundNavigationError(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (isRedirectNavigationError(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    captureException(error, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.server_component',\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  vercelWaitUntil(flushSafelyWithTimeout());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n"],"names":["getActiveSpan","commonObjectToIsolationScope","getRootSpan","getCapturedScopesOnSpan","setCapturedScopesOnSpan","Scope","spanToJSON","winterCGHeadersToDict","getClient","maybeExtractSynchronousParamsAndSearchParams","getSanitizedRequestUrl","withIsolationScope","withScope","commonObjectToPropagationContext","propagationContextFromHeaders","TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL","startSpanManual","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","handleCallbackErrors","isNotFoundNavigationError","SPAN_STATUS_ERROR","isRedirectNavigationError","SPAN_STATUS_OK","captureException","vercelWaitUntil","flushSafelyWithTimeout"],"mappings":";;;;;;;;;;AA8BA;AACA;AACA;AACA;AACO,SAAS,6BAA6B;AAC7C,EAAE,eAAe;AACjB,EAAE,OAAO;AACT,EAAK;AACL,EAAE,MAAM,EAAE,cAAc,EAAE,aAAA,EAAc,GAAI,OAAO;AACnD;AACA;AACA;AACA,EAAE,OAAO,IAAI,KAAK,CAAC,eAAe,EAAE;AACpC,IAAI,KAAK,EAAE,CAAC,gBAAgB,EAAE,OAAO,EAAE,IAAI,KAAK;AAChD,MAAM,MAAM,cAAA,GAAiBA,kBAAa,EAAE,EAAE,WAAW,EAAE,CAAC,OAAO;AACnE,MAAM,MAAM,iBAAiBC,yCAA4B,CAAC,OAAO,CAAC,OAAO,CAAC;;AAE1E,MAAM,IAAI,QAAA,GAAW,SAAA;AACrB,MAAM,MAAM,UAAA,GAAaD,kBAAa,EAAE;AACxC,MAAM,IAAI,UAAU,EAAE;AACtB,QAAQ,MAAM,QAAA,GAAWE,gBAAW,CAAC,UAAU,CAAC;AAChD,QAAQ,MAAM,EAAE,KAAA,EAAM,GAAIC,4BAAuB,CAAC,QAAQ,CAAC;AAC3D,QAAQC,4BAAuB,CAAC,QAAQ,EAAE,KAAA,IAAS,IAAIC,UAAK,EAAE,EAAE,cAAc,CAAC;;AAE/E,QAAQ,MAAM,QAAA,GAAWC,eAAU,CAAC,QAAQ,CAAC;;AAE7C,QAAQ,IAAI,QAAQ,CAAC,IAAA,IAAQ,aAAA,IAAiB,QAAQ,CAAC,IAAI,EAAE;AAC7D,UAAU,QAAA,GAAW,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE;AAC7D;AACA;;AAEA,MAAM,MAAM,WAAA,GAAc,OAAO,CAAC,OAAA,GAAUC,0BAAqB,CAAC,OAAO,CAAC,OAAO,CAAA,GAAI,SAAS;;AAE9F,MAAM,IAAI,MAAM,GAAuC,SAAS;;AAEhE,MAAM,IAAIC,cAAS,EAAE,EAAE,UAAU,EAAE,CAAC,cAAc,EAAE;AACpD,QAAQ,MAAM,KAAK,GAAY,IAAI,CAAC,CAAC,CAAC;AACtC,QAAQ,MAAM,EAAE,MAAM,EAAE,eAAA,KAAoBC,yDAA4C,CAAC,KAAK,CAAC;AAC/F,QAAQ,MAAA,GAAS,eAAe;AAChC;;AAEA,MAAM,cAAc,CAAC,wBAAwB,CAAC;AAC9C,QAAQ,iBAAiB,EAAE;AAC3B,UAAU,OAAO,EAAE,WAAW;AAC9B,UAAU,GAAG,EAAEC,2BAAsB,CAAC,cAAc,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC;AACpF,SAAQ;AACR,OAAO,CAAC;;AAER,MAAM,OAAOC,uBAAkB,CAAC,cAAc,EAAE,MAAM;AACtD,QAAQ,OAAOC,cAAS,CAAC,KAAA,IAAS;AAClC,UAAU,KAAK,CAAC,kBAAkB,CAAC,CAAC,EAAA,aAAA,CAAA,mBAAA,EAAA,cAAA,CAAA,CAAA,CAAA,CAAA;;AAEA,UAAA,IAAA,OAAA,CAAA,GAAA,CAAA,YAAA,KAAA,MAAA,EAAA;AACA,YAAA,MAAA,kBAAA,GAAAC,6CAAA;AACA,cAAA,OAAA,CAAA,OAAA;AACA,cAAAC,kCAAA,CAAA,WAAA,GAAA,cAAA,CAAA,EAAA,WAAA,GAAA,SAAA,CAAA,CAAA;AACA,aAAA;;AAEA,YAAA,IAAA,cAAA,EAAA;AACA,cAAA,kBAAA,CAAA,OAAA,GAAA,cAAA;AACA;;AAEA,YAAA,KAAA,CAAA,qBAAA,CAAA,kBAAA,CAAA;AACA;;AAEA,UAAA,MAAA,UAAA,GAAAd,kBAAA,EAAA;AACA,UAAA,IAAA,UAAA,EAAA;AACA,YAAA,MAAA,QAAA,GAAAE,gBAAA,CAAA,UAAA,CAAA;AACA,YAAA,MAAA,WAAA,GAAA,WAAA,GAAA,cAAA,CAAA;AACA,YAAA,IAAA,WAAA,EAAA;AACA,cAAA,QAAA,CAAA,YAAA,CAAAa,sEAAA,EAAA,WAAA,CAAA;AACA;AACA;;AAEA,UAAA,OAAAC,oBAAA;AACA,YAAA;AACA,cAAA,EAAA,EAAA,iBAAA;AACA,cAAA,IAAA,EAAA,CAAA,EAAA,aAAA,CAAA,mBAAA,EAAA,cAAA,CAAA,CAAA,CAAA;AACA,cAAA,UAAA,EAAA;AACA,gBAAA,CAAAC,qCAAA,GAAA,WAAA;AACA,gBAAA,CAAAC,qCAAA,GAAA,uCAAA;AACA,gBAAA,iCAAA,EAAA,aAAA;AACA,gBAAA,kCAAA,EAAA,cAAA;AACA,eAAA;AACA,aAAA;AACA,YAAA,IAAA,IAAA;AACA,cAAA,OAAAC,yBAAA;AACA,gBAAA,MAAA,gBAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;AACA,gBAAA,KAAA,IAAA;AACA;AACA;AACA,kBAAA,IAAAC,kDAAA,CAAA,KAAA,CAAA,EAAA;AACA;AACA,oBAAA,IAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAAC,sBAAA,EAAA,OAAA,EAAA,WAAA,EAAA,CAAA;AACA,mBAAA,MAAA,IAAAC,kDAAA,CAAA,KAAA,CAAA,EAAA;AACA;AACA,oBAAA,IAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAAC,mBAAA,EAAA,CAAA;AACA,mBAAA,MAAA;AACA,oBAAA,IAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAAF,sBAAA,EAAA,OAAA,EAAA,gBAAA,EAAA,CAAA;AACA,oBAAAG,qBAAA,CAAA,KAAA,EAAA;AACA,sBAAA,SAAA,EAAA;AACA,wBAAA,OAAA,EAAA,KAAA;AACA,wBAAA,IAAA,EAAA,uCAAA;AACA,uBAAA;AACA,qBAAA,CAAA;AACA;AACA,iBAAA;AACA,gBAAA,MAAA;AACA,kBAAA,IAAA,CAAA,GAAA,EAAA;AACA,kBAAAC,oBAAA,CAAAC,kCAAA,EAAA,CAAA;AACA,iBAAA;AACA,eAAA;AACA,aAAA;AACA,WAAA;AACA,SAAA,CAAA;AACA,OAAA,CAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;;;;"}