{"version":3,"file":"parameterization.js","sources":["../../../../src/client/routing/parameterization.ts"],"sourcesContent":["import { debug, GLOBAL_OBJ } from '@sentry/core';\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { RouteManifest } from '../../config/manifest/types';\n\nconst globalWithInjectedManifest = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRouteManifest: RouteManifest | undefined;\n};\n\n// Some performance caches\nlet cachedManifest: RouteManifest | null = null;\nlet cachedManifestString: string | undefined = undefined;\nconst compiledRegexCache: Map<string, RegExp> = new Map();\nconst routeResultCache: Map<string, string | undefined> = new Map();\n\n/**\n * Calculate the specificity score for a route path.\n * Lower scores indicate more specific routes.\n */\nfunction getRouteSpecificity(routePath: string): number {\n  const segments = routePath.split('/').filter(Boolean);\n  let score = 0;\n\n  for (const segment of segments) {\n    if (segment.startsWith(':')) {\n      const paramName = segment.substring(1);\n      if (paramName.endsWith('*?')) {\n        // Optional catch-all: [[...param]]\n        score += 1000;\n      } else if (paramName.endsWith('*')) {\n        // Required catch-all: [...param]\n        score += 100;\n      } else {\n        // Regular dynamic segment: [param]\n        score += 10;\n      }\n    }\n    // Static segments add 0 to score as they are most specific\n  }\n\n  return score;\n}\n\n/**\n * Get compiled regex from cache or create and cache it.\n */\nfunction getCompiledRegex(regexString: string): RegExp | null {\n  if (compiledRegexCache.has(regexString)) {\n    return compiledRegexCache.get(regexString) ?? null;\n  }\n\n  try {\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- regex patterns are from build-time route manifest, not user input\n    const regex = new RegExp(regexString);\n    compiledRegexCache.set(regexString, regex);\n    return regex;\n  } catch (error) {\n    DEBUG_BUILD && debug.warn('Could not compile regex', { regexString, error });\n    // Cache the failure to avoid repeated attempts by storing undefined\n    return null;\n  }\n}\n\n/**\n * Get and cache the route manifest from the global object.\n * @returns The parsed route manifest or null if not available/invalid.\n */\nfunction getManifest(): RouteManifest | null {\n  if (\n    !globalWithInjectedManifest?._sentryRouteManifest ||\n    typeof globalWithInjectedManifest._sentryRouteManifest !== 'string'\n  ) {\n    return null;\n  }\n\n  const currentManifestString = globalWithInjectedManifest._sentryRouteManifest;\n\n  // Return cached manifest if the string hasn't changed\n  if (cachedManifest && cachedManifestString === currentManifestString) {\n    return cachedManifest;\n  }\n\n  // Clear caches when manifest changes\n  compiledRegexCache.clear();\n  routeResultCache.clear();\n\n  let manifest: RouteManifest = {\n    staticRoutes: [],\n    dynamicRoutes: [],\n  };\n\n  // Shallow check if the manifest is actually what we expect it to be\n  try {\n    manifest = JSON.parse(currentManifestString);\n    if (!Array.isArray(manifest.staticRoutes) || !Array.isArray(manifest.dynamicRoutes)) {\n      return null;\n    }\n    // Cache the successfully parsed manifest\n    cachedManifest = manifest;\n    cachedManifestString = currentManifestString;\n    return manifest;\n  } catch {\n    // Something went wrong while parsing the manifest, so we'll fallback to no parameterization\n    DEBUG_BUILD && debug.warn('Could not extract route manifest');\n    return null;\n  }\n}\n\n/**\n * Find matching routes from static and dynamic route collections.\n * @param route - The route to match against.\n * @param staticRoutes - Array of static route objects.\n * @param dynamicRoutes - Array of dynamic route objects.\n * @returns Array of matching route paths.\n */\nfunction findMatchingRoutes(\n  route: string,\n  staticRoutes: RouteManifest['staticRoutes'],\n  dynamicRoutes: RouteManifest['dynamicRoutes'],\n): string[] {\n  const matches: string[] = [];\n\n  // Static path: no parameterization needed, return empty array\n  if (staticRoutes.some(r => r.path === route)) {\n    return matches;\n  }\n\n  // Dynamic path: find the route pattern that matches the concrete route\n  for (const dynamicRoute of dynamicRoutes) {\n    if (dynamicRoute.regex) {\n      const regex = getCompiledRegex(dynamicRoute.regex);\n      if (regex?.test(route)) {\n        matches.push(dynamicRoute.path);\n      }\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Parameterize a route using the route manifest.\n *\n * @param route - The route to parameterize.\n * @returns The parameterized route or undefined if no parameterization is needed.\n */\nexport const maybeParameterizeRoute = (route: string): string | undefined => {\n  const manifest = getManifest();\n  if (!manifest) {\n    return undefined;\n  }\n\n  // Check route result cache after manifest validation\n  if (routeResultCache.has(route)) {\n    return routeResultCache.get(route);\n  }\n\n  const { staticRoutes, dynamicRoutes } = manifest;\n  if (!Array.isArray(staticRoutes) || !Array.isArray(dynamicRoutes)) {\n    return undefined;\n  }\n\n  const matches = findMatchingRoutes(route, staticRoutes, dynamicRoutes);\n\n  // We can always do the `sort()` call, it will short-circuit when it has one array item\n  const result = matches.sort((a, b) => getRouteSpecificity(a) - getRouteSpecificity(b))[0];\n\n  routeResultCache.set(route, result);\n\n  return result;\n};\n"],"names":["GLOBAL_OBJ","DEBUG_BUILD","debug"],"mappings":"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"}