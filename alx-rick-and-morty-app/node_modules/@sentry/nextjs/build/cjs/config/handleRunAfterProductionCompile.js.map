{"version":3,"file":"handleRunAfterProductionCompile.js","sources":["../../../src/config/handleRunAfterProductionCompile.ts"],"sourcesContent":["import type { createSentryBuildPluginManager as createSentryBuildPluginManagerType } from '@sentry/bundler-plugin-core';\nimport { loadModule } from '@sentry/core';\nimport { getBuildPluginOptions } from './getBuildPluginOptions';\nimport type { SentryBuildOptions } from './types';\n\n/**\n * This function is called by Next.js after the production build is complete.\n * It is used to upload sourcemaps to Sentry.\n */\nexport async function handleRunAfterProductionCompile(\n  {\n    releaseName,\n    distDir,\n    buildTool,\n    usesNativeDebugIds,\n  }: { releaseName?: string; distDir: string; buildTool: 'webpack' | 'turbopack'; usesNativeDebugIds?: boolean },\n  sentryBuildOptions: SentryBuildOptions,\n): Promise<void> {\n  if (sentryBuildOptions.debug) {\n    // eslint-disable-next-line no-console\n    console.debug('[@sentry/nextjs] Running runAfterProductionCompile logic.');\n  }\n\n  const { createSentryBuildPluginManager } =\n    loadModule<{ createSentryBuildPluginManager: typeof createSentryBuildPluginManagerType }>(\n      '@sentry/bundler-plugin-core',\n      module,\n    ) ?? {};\n\n  if (!createSentryBuildPluginManager) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] Could not load build manager package. Will not run runAfterProductionCompile logic.',\n    );\n    return;\n  }\n\n  const options = getBuildPluginOptions({\n    sentryBuildOptions,\n    releaseName,\n    distDirAbsPath: distDir,\n    buildTool: `after-production-compile-${buildTool}`,\n  });\n\n  const sentryBuildPluginManager = createSentryBuildPluginManager(options, {\n    buildTool,\n    loggerPrefix: '[@sentry/nextjs - After Production Compile]',\n  });\n\n  await sentryBuildPluginManager.telemetry.emitBundlerPluginExecutionSignal();\n  await sentryBuildPluginManager.createRelease();\n\n  if (!usesNativeDebugIds) {\n    await sentryBuildPluginManager.injectDebugIds([distDir]);\n  }\n\n  await sentryBuildPluginManager.uploadSourcemaps([distDir], {\n    // We don't want to prepare the artifacts because we injected debug ids manually before\n    prepareArtifacts: false,\n  });\n  await sentryBuildPluginManager.deleteArtifacts();\n}\n"],"names":["loadModule","getBuildPluginOptions"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACO,eAAe,+BAA+B;AACrD,EAAE;AACF,IAAI,WAAW;AACf,IAAI,OAAO;AACX,IAAI,SAAS;AACb,IAAI,kBAAkB;AACtB,GAAG;AACH,EAAE,kBAAkB;AACpB,EAAiB;AACjB,EAAE,IAAI,kBAAkB,CAAC,KAAK,EAAE;AAChC;AACA,IAAI,OAAO,CAAC,KAAK,CAAC,2DAA2D,CAAC;AAC9E;;AAEA,EAAE,MAAM,EAAE,8BAAA,EAA+B;AACzC,IAAIA,eAAU;AACd,MAAM,6BAA6B;AACnC,MAAM,MAAM;AACZ,KAAI,IAAK,EAAE;;AAEX,EAAE,IAAI,CAAC,8BAA8B,EAAE;AACvC;AACA,IAAI,OAAO,CAAC,IAAI;AAChB,MAAM,sGAAsG;AAC5G,KAAK;AACL,IAAI;AACJ;;AAEA,EAAE,MAAM,OAAA,GAAUC,2CAAqB,CAAC;AACxC,IAAI,kBAAkB;AACtB,IAAI,WAAW;AACf,IAAI,cAAc,EAAE,OAAO;AAC3B,IAAI,SAAS,EAAE,CAAC,yBAAyB,EAAE,SAAS,CAAC,CAAA;AACA,GAAA,CAAA;;AAEA,EAAA,MAAA,wBAAA,GAAA,8BAAA,CAAA,OAAA,EAAA;AACA,IAAA,SAAA;AACA,IAAA,YAAA,EAAA,6CAAA;AACA,GAAA,CAAA;;AAEA,EAAA,MAAA,wBAAA,CAAA,SAAA,CAAA,gCAAA,EAAA;AACA,EAAA,MAAA,wBAAA,CAAA,aAAA,EAAA;;AAEA,EAAA,IAAA,CAAA,kBAAA,EAAA;AACA,IAAA,MAAA,wBAAA,CAAA,cAAA,CAAA,CAAA,OAAA,CAAA,CAAA;AACA;;AAEA,EAAA,MAAA,wBAAA,CAAA,gBAAA,CAAA,CAAA,OAAA,CAAA,EAAA;AACA;AACA,IAAA,gBAAA,EAAA,KAAA;AACA,GAAA,CAAA;AACA,EAAA,MAAA,wBAAA,CAAA,eAAA,EAAA;AACA;;;;"}