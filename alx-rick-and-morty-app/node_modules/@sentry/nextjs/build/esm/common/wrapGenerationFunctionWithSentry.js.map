{"version":3,"file":"wrapGenerationFunctionWithSentry.js","sources":["../../../src/common/wrapGenerationFunctionWithSentry.ts"],"sourcesContent":["import type { RequestEventData, WebFetchHeaders } from '@sentry/core';\nimport {\n  captureException,\n  getActiveSpan,\n  getCapturedScopesOnSpan,\n  getClient,\n  getRootSpan,\n  handleCallbackErrors,\n  propagationContextFromHeaders,\n  Scope,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  SPAN_STATUS_ERROR,\n  SPAN_STATUS_OK,\n  spanToJSON,\n  startSpanManual,\n  winterCGHeadersToDict,\n  withIsolationScope,\n  withScope,\n} from '@sentry/core';\nimport type { GenerationFunctionContext } from '../common/types';\nimport { isNotFoundNavigationError, isRedirectNavigationError } from './nextNavigationErrorUtils';\nimport { TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL } from './span-attributes-with-logic-attached';\nimport { commonObjectToIsolationScope, commonObjectToPropagationContext } from './utils/tracingUtils';\nimport { getSanitizedRequestUrl } from './utils/urls';\nimport { maybeExtractSynchronousParamsAndSearchParams } from './utils/wrapperUtils';\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrapGenerationFunctionWithSentry<F extends (...args: any[]) => any>(\n  generationFunction: F,\n  context: GenerationFunctionContext,\n): F {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = getActiveSpan()?.spanContext().traceId;\n      let headers: WebFetchHeaders | undefined = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch {\n        /** empty */\n      }\n\n      const isolationScope = commonObjectToIsolationScope(headers);\n      let pathname = undefined as string | undefined;\n\n      const activeSpan = getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = getRootSpan(activeSpan);\n        const { scope } = getCapturedScopesOnSpan(rootSpan);\n        setCapturedScopesOnSpan(rootSpan, scope ?? new Scope(), isolationScope);\n\n        const spanData = spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target'] as string;\n        }\n      }\n\n      const headersDict = headers ? winterCGHeadersToDict(headers) : undefined;\n\n      let data: Record<string, unknown> | undefined = undefined;\n      if (getClient()?.getOptions().sendDefaultPii) {\n        const props: unknown = args[0];\n        const { params, searchParams } = maybeExtractSynchronousParamsAndSearchParams(props);\n        data = { params, searchParams };\n      }\n\n      return withIsolationScope(isolationScope, () => {\n        return withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n              url: getSanitizedRequestUrl(\n                componentRoute,\n                data?.params as Record<string, string> | undefined,\n                headersDict,\n                pathname,\n              ),\n            } satisfies RequestEventData,\n          });\n\n          const activeSpan = getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = commonObjectToPropagationContext(\n            headers,\n            propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (isNotFoundNavigationError(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                    getRootSpan(span).setStatus({ code: SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (isRedirectNavigationError(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    getRootSpan(span).setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n                    captureException(err, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.generation_function',\n                        data: {\n                          function: generationFunctionIdentifier,\n                        },\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n"],"names":[],"mappings":"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"}