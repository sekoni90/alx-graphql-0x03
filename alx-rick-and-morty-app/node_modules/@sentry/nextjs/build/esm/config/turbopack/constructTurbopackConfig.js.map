{"version":3,"file":"constructTurbopackConfig.js","sources":["../../../../src/config/turbopack/constructTurbopackConfig.ts"],"sourcesContent":["import { debug } from '@sentry/core';\nimport type { RouteManifest } from '../manifest/types';\nimport type { NextConfigObject, SentryBuildOptions, TurbopackMatcherWithRule, TurbopackOptions } from '../types';\nimport { supportsNativeDebugIds } from '../util';\nimport { generateValueInjectionRules } from './generateValueInjectionRules';\n\n/**\n * Construct a Turbopack config object from a Next.js config object and a Turbopack options object.\n *\n * @param userNextConfig - The Next.js config object.\n * @param userSentryOptions - The Sentry build options object.\n * @param routeManifest - The route manifest object.\n * @param nextJsVersion - The Next.js version.\n * @returns The Turbopack config object.\n */\nexport function constructTurbopackConfig({\n  userNextConfig,\n  userSentryOptions,\n  routeManifest,\n  nextJsVersion,\n}: {\n  userNextConfig: NextConfigObject;\n  userSentryOptions: SentryBuildOptions;\n  routeManifest?: RouteManifest;\n  nextJsVersion?: string;\n}): TurbopackOptions {\n  // If sourcemaps are disabled, we don't need to enable native debug ids as this will add build time.\n  const shouldEnableNativeDebugIds =\n    (supportsNativeDebugIds(nextJsVersion ?? '') && userNextConfig?.turbopack?.debugIds) ??\n    userSentryOptions.sourcemaps?.disable !== true;\n\n  const newConfig: TurbopackOptions = {\n    ...userNextConfig.turbopack,\n    ...(shouldEnableNativeDebugIds ? { debugIds: true } : {}),\n  };\n\n  const valueInjectionRules = generateValueInjectionRules({\n    routeManifest,\n    nextJsVersion,\n  });\n\n  for (const { matcher, rule } of valueInjectionRules) {\n    newConfig.rules = safelyAddTurbopackRule(newConfig.rules, { matcher, rule });\n  }\n\n  return newConfig;\n}\n\n/**\n * Safely add a Turbopack rule to the existing rules.\n *\n * @param existingRules - The existing rules.\n * @param matcher - The matcher for the rule.\n * @param rule - The rule to add.\n * @returns The updated rules object.\n */\nexport function safelyAddTurbopackRule(\n  existingRules: TurbopackOptions['rules'],\n  { matcher, rule }: TurbopackMatcherWithRule,\n): TurbopackOptions['rules'] {\n  if (!existingRules) {\n    return {\n      [matcher]: rule,\n    };\n  }\n\n  // If the rule already exists, we don't want to mess with it.\n  if (existingRules[matcher]) {\n    debug.log(\n      `[@sentry/nextjs] - Turbopack rule already exists for ${matcher}. Please remove it from your Next.js config in order for Sentry to work properly.`,\n    );\n    return existingRules;\n  }\n\n  return {\n    ...existingRules,\n    [matcher]: rule,\n  };\n}\n"],"names":[],"mappings":";;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,wBAAwB,CAAC;AACzC,EAAE,cAAc;AAChB,EAAE,iBAAiB;AACnB,EAAE,aAAa;AACf,EAAE,aAAa;AACf;;AAKA,EAAqB;AACrB;AACA,EAAE,MAAM,0BAAA;AACR,IAAI,CAAC,sBAAsB,CAAC,aAAA,IAAiB,EAAE,CAAA,IAAK,cAAc,EAAE,SAAS,EAAE,QAAQ;AACvF,IAAI,iBAAiB,CAAC,UAAU,EAAE,OAAA,KAAY,IAAI;;AAElD,EAAE,MAAM,SAAS,GAAqB;AACtC,IAAI,GAAG,cAAc,CAAC,SAAS;AAC/B,IAAI,IAAI,0BAAA,GAA6B,EAAE,QAAQ,EAAE,IAAA,EAAK,GAAI,EAAE,CAAC;AAC7D,GAAG;;AAEH,EAAE,MAAM,mBAAA,GAAsB,2BAA2B,CAAC;AAC1D,IAAI,aAAa;AACjB,IAAI,aAAa;AACjB,GAAG,CAAC;;AAEJ,EAAE,KAAK,MAAM,EAAE,OAAO,EAAE,IAAA,EAAK,IAAK,mBAAmB,EAAE;AACvD,IAAI,SAAS,CAAC,KAAA,GAAQ,sBAAsB,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,IAAA,EAAM,CAAC;AAChF;;AAEA,EAAE,OAAO,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,sBAAsB;AACtC,EAAE,aAAa;AACf,EAAE,EAAE,OAAO,EAAE,IAAA,EAAM;AACnB,EAA6B;AAC7B,EAAE,IAAI,CAAC,aAAa,EAAE;AACtB,IAAI,OAAO;AACX,MAAM,CAAC,OAAO,GAAG,IAAI;AACrB,KAAK;AACL;;AAEA;AACA,EAAE,IAAI,aAAa,CAAC,OAAO,CAAC,EAAE;AAC9B,IAAI,KAAK,CAAC,GAAG;AACb,MAAM,CAAC,qDAAqD,EAAE,OAAO,CAAC,iFAAiF,CAAC;AACxJ,KAAK;AACL,IAAI,OAAO,aAAa;AACxB;;AAEA,EAAE,OAAO;AACT,IAAI,GAAG,aAAa;AACpB,IAAI,CAAC,OAAO,GAAG,IAAI;AACnB,GAAG;AACH;;;;"}