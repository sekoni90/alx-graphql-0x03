{"version":3,"file":"index.js","sources":["../../../src/server/index.ts"],"sourcesContent":["import { context } from '@opentelemetry/api';\nimport {\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_HTTP_ROUTE,\n  ATTR_URL_QUERY,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_TARGET,\n} from '@opentelemetry/semantic-conventions';\nimport type { EventProcessor } from '@sentry/core';\nimport {\n  applySdkMetadata,\n  debug,\n  extractTraceparentData,\n  getCapturedScopesOnSpan,\n  getClient,\n  getCurrentScope,\n  getGlobalScope,\n  getIsolationScope,\n  getRootSpan,\n  GLOBAL_OBJ,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  setCapturedScopesOnSpan,\n  spanToJSON,\n  stripUrlQueryAndFragment,\n} from '@sentry/core';\nimport type { NodeClient, NodeOptions } from '@sentry/node';\nimport { getDefaultIntegrations, httpIntegration, init as nodeInit } from '@sentry/node';\nimport { getScopesFromContext } from '@sentry/opentelemetry';\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { devErrorSymbolicationEventProcessor } from '../common/devErrorSymbolicationEventProcessor';\nimport { getVercelEnv } from '../common/getVercelEnv';\nimport {\n  TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL,\n  TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL,\n  TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION,\n} from '../common/span-attributes-with-logic-attached';\nimport { addHeadersAsAttributes } from '../common/utils/addHeadersAsAttributes';\nimport { isBuild } from '../common/utils/isBuild';\nimport { distDirRewriteFramesIntegration } from './distDirRewriteFramesIntegration';\n\nexport * from '@sentry/node';\n\nexport { captureUnderscoreErrorException } from '../common/pages-router-instrumentation/_error';\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRewriteFramesDistDir?: string;\n  _sentryRewritesTunnelPath?: string;\n  _sentryRelease?: string;\n};\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */\nexport const ErrorBoundary = (props: React.PropsWithChildren<unknown>): React.ReactNode => {\n  if (!props.children) {\n    return null;\n  }\n\n  if (typeof props.children === 'function') {\n    return (props.children as () => React.ReactNode)();\n  }\n\n  // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n  return props.children as React.ReactNode;\n};\n\n/**\n * A passthrough redux enhancer for the server that doesn't depend on anything from the `@sentry/react` package.\n */\nexport function createReduxEnhancer() {\n  return (createStore: unknown) => createStore;\n}\n\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withErrorBoundary<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n): React.FC<P> {\n  return WrappedComponent as React.FC<P>;\n}\n\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */\nexport function showReportDialog(): void {\n  return;\n}\n\n/** Inits the Sentry NextJS SDK on node. */\nexport function init(options: NodeOptions): NodeClient | undefined {\n  if (isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = getDefaultIntegrations(options)\n    .filter(integration => integration.name !== 'Http')\n    .concat(\n      // We are using the HTTP integration without instrumenting incoming HTTP requests because Next.js does that by itself.\n      httpIntegration({\n        disableIncomingRequestSpans: true,\n      }),\n    );\n\n  // Turn off Next.js' own fetch instrumentation (only when we manage OTEL)\n  // https://github.com/lforst/nextjs-fork/blob/1994fd186defda77ad971c36dc3163db263c993f/packages/next/src/server/lib/patch-fetch.ts#L245\n  // Enable with custom OTel setup: https://github.com/getsentry/sentry-javascript/issues/17581\n  if (!options.skipOpenTelemetrySetup) {\n    process.env.NEXT_OTEL_FETCH_DISABLED = '1';\n  }\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = process.env._sentryRewriteFramesDistDir || globalWithInjectedValues._sentryRewriteFramesDistDir;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts: NodeOptions = {\n    environment: process.env.SENTRY_ENVIRONMENT || getVercelEnv(false) || process.env.NODE_ENV,\n    release: process.env._sentryRelease || globalWithInjectedValues._sentryRelease,\n    defaultIntegrations: customDefaultIntegrations,\n    ...options,\n  };\n\n  if (DEBUG_BUILD && opts.debug) {\n    debug.enable();\n  }\n\n  DEBUG_BUILD && debug.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    DEBUG_BUILD && debug.log('SDK already initialized');\n    return;\n  }\n\n  applySdkMetadata(opts, 'nextjs', ['nextjs', 'node']);\n\n  const client = nodeInit(opts);\n  client?.on('beforeSampling', ({ spanAttributes }, samplingDecision) => {\n    // There are situations where the Next.js Node.js server forwards requests for the Edge Runtime server (e.g. in\n    // middleware) and this causes spans for Sentry ingest requests to be created. These are not exempt from our tracing\n    // because we didn't get the chance to do `suppressTracing`, since this happens outside of userland.\n    // We need to drop these spans.\n    if (\n      // eslint-disable-next-line deprecation/deprecation\n      (typeof spanAttributes[SEMATTRS_HTTP_TARGET] === 'string' &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[SEMATTRS_HTTP_TARGET].includes('sentry_key') &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[SEMATTRS_HTTP_TARGET].includes('sentry_client')) ||\n      (typeof spanAttributes[ATTR_URL_QUERY] === 'string' &&\n        spanAttributes[ATTR_URL_QUERY].includes('sentry_key') &&\n        spanAttributes[ATTR_URL_QUERY].includes('sentry_client'))\n    ) {\n      samplingDecision.decision = false;\n    }\n  });\n\n  client?.on('spanStart', span => {\n    const spanAttributes = spanToJSON(span).data;\n    const rootSpan = getRootSpan(span);\n    const isRootSpan = span === rootSpan;\n\n    // What we do in this glorious piece of code, is hoist any information about parameterized routes from spans emitted\n    // by Next.js via the `next.route` attribute, up to the transaction by setting the http.route attribute.\n    if (typeof spanAttributes?.['next.route'] === 'string') {\n      const rootSpanAttributes = spanToJSON(rootSpan).data;\n      // Only hoist the http.route attribute if the transaction doesn't already have it\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        (rootSpanAttributes?.[ATTR_HTTP_REQUEST_METHOD] || rootSpanAttributes?.[SEMATTRS_HTTP_METHOD]) &&\n        !rootSpanAttributes?.[ATTR_HTTP_ROUTE]\n      ) {\n        const route = spanAttributes['next.route'].replace(/\\/route$/, '');\n        rootSpan.updateName(route);\n        rootSpan.setAttribute(ATTR_HTTP_ROUTE, route);\n        // Preserving the original attribute despite internally not depending on it\n        rootSpan.setAttribute('next.route', route);\n      }\n    }\n\n    // We want to skip span data inference for any spans generated by Next.js. Reason being that Next.js emits spans\n    // with patterns (e.g. http.server spans) that will produce confusing data.\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    if (isRootSpan) {\n      const headers = getIsolationScope().getScopeData().sdkProcessingMetadata?.normalizedRequest?.headers;\n      addHeadersAsAttributes(headers, rootSpan);\n    }\n\n    // We want to fork the isolation scope for incoming requests\n    if (spanAttributes?.['next.span_type'] === 'BaseServer.handleRequest' && isRootSpan) {\n      const scopes = getCapturedScopesOnSpan(span);\n\n      const isolationScope = (scopes.isolationScope || getIsolationScope()).clone();\n      const scope = scopes.scope || getCurrentScope();\n\n      const currentScopesPointer = getScopesFromContext(context.active());\n      if (currentScopesPointer) {\n        currentScopesPointer.isolationScope = isolationScope;\n      }\n\n      setCapturedScopesOnSpan(span, scope, isolationScope);\n    }\n  });\n\n  getGlobalScope().addEventProcessor(\n    Object.assign(\n      (event => {\n        if (event.type === 'transaction') {\n          // Filter out transactions for static assets\n          // This regex matches the default path to the static assets (`_next/static`) and could potentially filter out too many transactions.\n          // We match `/_next/static/` anywhere in the transaction name because its location may change with the basePath setting.\n          if (event.transaction?.match(/^GET (\\/.*)?\\/_next\\/static\\//)) {\n            return null;\n          }\n\n          // Filter out transactions for requests to the tunnel route\n          if (\n            (globalWithInjectedValues._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${globalWithInjectedValues._sentryRewritesTunnelPath}`) ||\n            (process.env._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${process.env._sentryRewritesTunnelPath}`)\n          ) {\n            return null;\n          }\n\n          // Filter out requests to resolve source maps for stack frames in dev mode\n          if (event.transaction?.match(/\\/__nextjs_original-stack-frame/)) {\n            return null;\n          }\n\n          // Filter out /404 transactions which seem to be created excessively\n          if (\n            // Pages router\n            event.transaction === '/404' ||\n            // App router (could be \"GET /404\", \"POST /404\", ...)\n            event.transaction?.match(/^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \\/(404|_not-found)$/)\n          ) {\n            return null;\n          }\n\n          // Filter transactions that we explicitly want to drop.\n          if (event.contexts?.trace?.data?.[TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION]) {\n            return null;\n          }\n\n          // Next.js 13 sometimes names the root transactions like this containing useless tracing.\n          if (event.transaction === 'NextServer.getRequestHandler') {\n            return null;\n          }\n\n          // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n          if (typeof event.contexts?.trace?.data?.[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string') {\n            const traceparentData = extractTraceparentData(\n              event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL],\n            );\n\n            if (traceparentData?.parentSampled === false) {\n              return null;\n            }\n          }\n\n          return event;\n        } else {\n          return event;\n        }\n      }) satisfies EventProcessor,\n      { id: 'NextLowQualityTransactionsFilter' },\n    ),\n  );\n\n  getGlobalScope().addEventProcessor(\n    Object.assign(\n      ((event, hint) => {\n        if (event.type !== undefined) {\n          return event;\n        }\n\n        const originalException = hint.originalException;\n\n        const isPostponeError =\n          typeof originalException === 'object' &&\n          originalException !== null &&\n          '$$typeof' in originalException &&\n          originalException.$$typeof === Symbol.for('react.postpone');\n\n        if (isPostponeError) {\n          // Postpone errors are used for partial-pre-rendering (PPR)\n          return null;\n        }\n\n        // We don't want to capture suspense errors as they are simply used by React/Next.js for control flow\n        const exceptionMessage = event.exception?.values?.[0]?.value;\n        if (\n          exceptionMessage?.includes('Suspense Exception: This is not a real error!') ||\n          exceptionMessage?.includes('Suspense Exception: This is not a real error, and should not leak')\n        ) {\n          return null;\n        }\n\n        return event;\n      }) satisfies EventProcessor,\n      { id: 'DropReactControlFlowErrors' },\n    ),\n  );\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // Enhance route handler transactions\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'BaseServer.handleRequest'\n    ) {\n      event.contexts.trace.data[SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server';\n      event.contexts.trace.op = 'http.server';\n\n      if (event.transaction) {\n        event.transaction = stripUrlQueryAndFragment(event.transaction);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const method = event.contexts.trace.data[SEMATTRS_HTTP_METHOD];\n      // eslint-disable-next-line deprecation/deprecation\n      const target = event.contexts?.trace?.data?.[SEMATTRS_HTTP_TARGET];\n      const route = event.contexts.trace.data[ATTR_HTTP_ROUTE] || event.contexts.trace.data['next.route'];\n\n      if (typeof method === 'string' && typeof route === 'string') {\n        const cleanRoute = route.replace(/\\/route$/, '');\n        event.transaction = `${method} ${cleanRoute}`;\n        event.contexts.trace.data[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n        // Preserve next.route in case it did not get hoisted\n        event.contexts.trace.data['next.route'] = cleanRoute;\n      }\n\n      // backfill transaction name for pages that would otherwise contain unparameterized routes\n      if (event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] && event.transaction !== 'GET /_app') {\n        event.transaction = `${method} ${event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`;\n      }\n\n      // Next.js overrides transaction names for page loads that throw an error\n      // but we want to keep the original target name\n      if (event.transaction === 'GET /_error' && target) {\n        event.transaction = `${method ? `${method} ` : ''}${target}`;\n      }\n    }\n\n    // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n    if (\n      event.type === 'transaction' &&\n      typeof event.contexts?.trace?.data?.[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string'\n    ) {\n      const traceparentData = extractTraceparentData(event.contexts.trace.data[TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n\n      if (traceparentData?.traceId) {\n        event.contexts.trace.trace_id = traceparentData.traceId;\n      }\n\n      if (traceparentData?.parentSpanId) {\n        event.contexts.trace.parent_span_id = traceparentData.parentSpanId;\n      }\n    }\n  });\n\n  if (process.env.NODE_ENV === 'development') {\n    getGlobalScope().addEventProcessor(devErrorSymbolicationEventProcessor);\n  }\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (process.turbopack) {\n      getGlobalScope().setTag('turbopack', true);\n    }\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n\n  DEBUG_BUILD && debug.log('SDK successfully initialized');\n\n  return client;\n}\n\nfunction sdkAlreadyInitialized(): boolean {\n  return !!getClient();\n}\n\nexport * from '../common';\n\nexport { wrapApiHandlerWithSentry } from '../common/pages-router-instrumentation/wrapApiHandlerWithSentry';\n"],"names":["nodeInit"],"mappings":"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"}